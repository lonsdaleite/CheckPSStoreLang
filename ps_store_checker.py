import asyncio
import json
import logging
import re
import time
from typing import List, Dict, Optional, Any

import aiohttp
import requests
from bs4 import BeautifulSoup

from constants import (
    get_random_headers, HEADERS, REQUEST_TIMEOUT, RETRY_ATTEMPTS, RETRY_DELAY,
    TRASH_TYPES, MAX_PARALLEL_REQUESTS
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

async def retry_request_async(func, *args, retries=RETRY_ATTEMPTS, delay=RETRY_DELAY, fallback=None):
    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
    for attempt in range(1, retries + 1):
        try:
            return await func(*args)
        except Exception as e:
            if attempt < retries:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}. –†–µ—Ç—Ä–∞–π —á–µ—Ä–µ–∑ {delay}—Å... (–ø–æ–ø—ã—Ç–∫–∞ {attempt}/{retries})")
                await asyncio.sleep(delay)
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º (–ø–æ—Å–ª–µ {retries} –ø–æ–ø—ã—Ç–æ–∫)")
                return fallback
    return None


def is_card_game(card):
    # –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–∞—Ä—Ç–æ—á–∫–∞ —Ç–æ–≤–∞—Ä–∞ –∏–≥—Ä–æ–π (–Ω–µ DLC, –≤–∞–ª—é—Ç–∞ –∏ —Ç.–¥.).
    # –ù–∞—Ö–æ–¥–∏–º product-type, –µ—Å–ª–∏ –µ—Å—Ç—å
    tag = card.find("span", class_="psw-product-tile__product-type")
    if not tag:
        return True  # –ù–µ—Ç —Ç–∏–ø–∞ ‚Äî —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, –∏–≥—Ä–∞
    type_text = tag.text.strip().lower()

    for trash in TRASH_TYPES:
        if trash in type_text:
            return False  # –¢–∏–ø —è–≤–Ω–æ –º—É—Å–æ—Ä–Ω—ã–π
    return True  # –¢–∏–ø –µ—Å—Ç—å, –Ω–æ –æ–Ω –Ω–µ –º—É—Å–æ—Ä–Ω—ã–π ‚Üí –æ—Å—Ç–∞–≤–ª—è–µ–º


async def search_game_async(session: aiohttp.ClientSession, region: str, query: str, platform: str) -> Optional[str]:
    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø–æ–∏—Å–∫–∞ –∏–≥—Ä—ã –≤ PS Store
    url = f"https://store.playstation.com/{region}/search/{query.lower().replace(' ', '%20').replace('-', '%20')}"
    logger.info(f"üîç –ü–æ–∏—Å–∫ –∏–≥—Ä—ã: {url}")

    headers = get_random_headers()
    async with session.get(url, headers=headers, timeout=REQUEST_TIMEOUT) as resp:
        text = await resp.text()
        soup = BeautifulSoup(text, "html.parser")

        # –ü–æ–ª—É—á–∞–µ–º –º–∞–∫—Å–∏–º—É–º 20 –∫–∞—Ä—Ç–æ—á–µ–∫
        product_cards = soup.select('a[href*="/product/"]')[:20]
        candidates = []

        for a_tag in product_cards:
            href = a_tag.get("href", "")
            full_url = "https://store.playstation.com" + href
            text = a_tag.get_text()

            if "unavailable" in text.lower() or "pre-order" in text.lower() or "announced" in text.lower():
                continue

            if not text.lower().strip().startswith("ps5") and not text.lower().strip().startswith("ps4"):
                continue

            if not is_card_game(a_tag):
                continue

            candidates.append((text, full_url))

        # –ò—â–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –∏ ps4/ps5
        for text, url in candidates:
            if platform.lower() in text.lower():
                return url

        return None


async def get_languages_async(session: aiohttp.ClientSession, game_url: str) -> Dict[str, List[str]]:
    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —è–∑—ã–∫–æ–≤ –∏–≥—Ä—ã
    headers = get_random_headers()
    async with session.get(game_url, headers=headers, timeout=REQUEST_TIMEOUT) as resp:
        text = await resp.text()
        soup = BeautifulSoup(text, "html.parser")

        script_tag = soup.find("script", {"id": "__NEXT_DATA__"})
        if not script_tag:
            raise Exception("‚ùå JSON-–±–ª–æ–∫ __NEXT_DATA__ –Ω–µ –Ω–∞–π–¥–µ–Ω")

        text = script_tag.string.replace('\\"', '"')

        # –ù–∞–π–¥—ë–º –í–°–ï –≤–ª–æ–∂–µ–Ω–Ω—ã–µ JSON-—Å—Ç—Ä–æ–∫–∏, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –Ω—É–∂–Ω—ã–µ —Ç–∏–ø—ã
        voice_jsons = re.findall(r'\{[^{}]*"__typename":"SpokenLanguagesByPlatformElement"[^{}]*\}', text)
        sub_jsons = re.findall(r'\{[^{}]*"__typename":"ScreenLanguagesByPlatformElement"[^{}]*\}', text)

        result = {
            'ps5_voice': [],
            'ps5_subs': [],
            'ps4_voice': [],
            'ps4_subs': [],
        }

        def parse_json_block(raw, field, prefix):
            try:
                data = json.loads(raw)
                platform = data.get("platform", "").lower()
                if platform in ["ps4", "ps5"]:
                    result[f"{platform}_{prefix}"] = data.get(field, [])
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –±–ª–æ–∫–∞: {e}")

        for j in voice_jsons:
            parse_json_block(j, "spokenLanguages", "voice")

        for j in sub_jsons:
            parse_json_block(j, "screenLanguages", "subs")

        return result


def yesno_md(x):
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –±—É–ª–µ–≤–æ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ markdown-–≥–∞–ª–æ—á–∫—É.
    return "‚úÖ" if x else "‚ùå"


async def check_single_game_language_for_region_md_async(
        session: aiohttp.ClientSession,
        game_query: str,
        region: str,
        platform: str = 'ps5',
        lang_code: str = 'ru'
) -> None | list[str] | list[str | None | Any]:
    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —è–∑—ã–∫–∞ –¥–ª—è –æ–¥–Ω–æ–π –∏–≥—Ä—ã –≤ –æ–¥–Ω–æ–º —Ä–µ–≥–∏–æ–Ω–µ
    url = await retry_request_async(
        search_game_async,
        session,
        region,
        game_query,
        platform
    )

    if not url:
        return [game_query, region.split('-')[-1].upper()] + ["‚ùå"] * 6 + ["–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞"]

    langs = await retry_request_async(get_languages_async, session, url)
    if not langs:
        return [game_query, region.split('-')[-1].upper()] + ["–û—à–∏–±–∫–∞"] * 6 + ["–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —è–∑—ã–∫–∏"]

    has_ps5 = bool(langs['ps5_voice'] or langs['ps5_subs'])
    has_ps4 = bool(langs['ps4_voice'] or langs['ps4_subs'])

    if platform.lower() == "ps5":
        return [
            game_query,
            region.split('-')[-1].upper(),
            yesno_md(has_ps5),
            yesno_md(lang_code in langs['ps5_voice']),
            yesno_md(lang_code in langs['ps5_subs']),
            url
        ]
    if platform.lower() == "ps4":
        return [
            game_query,
            region.split('-')[-1].upper(),
            yesno_md(has_ps4),
            yesno_md(lang_code in langs['ps4_voice']),
            yesno_md(lang_code in langs['ps4_subs']),
            url
        ]
    return None


async def check_multiple_games_languages_md_async(
        games: List[str],
        regions: List[str],
        platform: str = 'ps5',
        lang_code: str = 'ru',
        output_file: str = 'output.md',
        max_parallel_requests: int = MAX_PARALLEL_REQUESTS
) -> None:
    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —è–∑—ã–∫–æ–≤ –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏–≥—Ä
    header = f"### üéÆ –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–∑—ã–∫–æ–≤ –¥–ª—è –∏–≥—Ä (—è–∑—ã–∫: {lang_code})\n\n"
    table_header = (
        f"| –ò–≥—Ä–∞ | –†–µ–≥–∏–æ–Ω | {platform.upper()} | –û–∑–≤. | –°—É–±. | URL |\n"
        "|------|--------|-----|------|------|-----|\n"
    )

    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    with open(output_file, "w", encoding="utf-8") as f:
        f.write(header)
        f.write(table_header)

    logger.info(header.strip())
    logger.info(table_header.strip())

    # –°–æ–∑–¥–∞–µ–º —Å–µ–º–∞—Ñ–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    semaphore = asyncio.Semaphore(max_parallel_requests)

    async def process_game_region(game: str, region: str):
        async with semaphore:
            return await check_single_game_language_for_region_md_async(
                session,
                game,
                region,
                platform,
                lang_code
            )

    async with aiohttp.ClientSession() as session:
        tasks = []
        for game in games:
            for region in regions:
                tasks.append(process_game_region(game, region))

        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        results = await asyncio.gather(*tasks)

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª
        for result in results:
            if result:
                row_str = f"| {' | '.join(result)} |\n"
                with open(output_file, "a", encoding="utf-8") as f:
                    f.write(row_str)
                logger.info(row_str.strip())


# –û—Å—Ç–∞–≤–ª—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
def retry_request(func, *args, retries=RETRY_ATTEMPTS, delay=RETRY_DELAY, fallback=None):
    # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏ —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π.
    for attempt in range(1, retries + 1):
        try:
            return func(*args)
        except Exception as e:
            if attempt < retries:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}. –†–µ—Ç—Ä–∞–π —á–µ—Ä–µ–∑ {delay}—Å... (–ø–æ–ø—ã—Ç–∫–∞ {attempt}/{retries})")
                time.sleep(delay)
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º (–ø–æ—Å–ª–µ {retries} –ø–æ–ø—ã—Ç–æ–∫)")
                return fallback
    return None


def search_game(region, query, platform):
    # –ò—â–µ—Ç –∏–≥—Ä—É –≤ PS Store –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ—ë URL.
    url = f"https://store.playstation.com/{region}/search/{query.lower().replace(' ', '%20').replace('-', '%20')}"
    resp = requests.get(url, headers=HEADERS, timeout=REQUEST_TIMEOUT)
    soup = BeautifulSoup(resp.text, "html.parser")

    # –ü–æ–ª—É—á–∞–µ–º –º–∞–∫—Å–∏–º—É–º 20 –∫–∞—Ä—Ç–æ—á–µ–∫
    product_cards = soup.select('a[href*="/product/"]')[:20]
    candidates = []

    for a_tag in product_cards:
        href = a_tag.get("href", "")
        full_url = "https://store.playstation.com" + href
        text = a_tag.get_text()

        if "unavailable" in text.lower() or "pre-order" in text.lower() or "announced" in text.lower():
            continue

        if not text.lower().strip().startswith("ps5") and not text.lower().strip().startswith("ps4"):
            continue

        if not is_card_game(a_tag):
            continue

        candidates.append((text, full_url))

    # –ò—â–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –∏ ps4/ps5
    for text, url in candidates:
        if platform.lower() in text.lower():
            return url

    return None


def get_languages(game_url):
    # –ü–æ–ª—É—á–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏ –¥–ª—è –∏–≥—Ä—ã.
    resp = requests.get(game_url, headers=HEADERS, timeout=REQUEST_TIMEOUT)
    soup = BeautifulSoup(resp.text, "html.parser")

    script_tag = soup.find("script", {"id": "__NEXT_DATA__"})
    if not script_tag:
        raise Exception("‚ùå JSON-–±–ª–æ–∫ __NEXT_DATA__ –Ω–µ –Ω–∞–π–¥–µ–Ω")

    text = script_tag.string.replace('\\"', '"')

    # –ù–∞–π–¥—ë–º –í–°–ï –≤–ª–æ–∂–µ–Ω–Ω—ã–µ JSON-—Å—Ç—Ä–æ–∫–∏, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –Ω—É–∂–Ω—ã–µ —Ç–∏–ø—ã
    voice_jsons = re.findall(r'\{[^{}]*"__typename":"SpokenLanguagesByPlatformElement"[^{}]*\}', text)
    sub_jsons = re.findall(r'\{[^{}]*"__typename":"ScreenLanguagesByPlatformElement"[^{}]*\}', text)

    result = {
        'ps5_voice': [],
        'ps5_subs': [],
        'ps4_voice': [],
        'ps4_subs': [],
    }

    def parse_json_block(raw, field, prefix):
        try:
            data = json.loads(raw)
            platform = data.get("platform", "").lower()
            if platform in ["ps4", "ps5"]:
                result[f"{platform}_{prefix}"] = data.get(field, [])
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –±–ª–æ–∫–∞: {e}")

    for j in voice_jsons:
        parse_json_block(j, "spokenLanguages", "voice")

    for j in sub_jsons:
        parse_json_block(j, "screenLanguages", "subs")

    return result


def check_single_game_language_for_region_md(game_query, region, platform='ps5', lang_code='ru'):
    # –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —è–∑—ã–∫–∞ –¥–ª—è –æ–¥–Ω–æ–π –∏–≥—Ä—ã –≤ –æ–¥–Ω–æ–º —Ä–µ–≥–∏–æ–Ω–µ.
    url = retry_request(search_game, region, game_query, platform)
    if not url:
        return [game_query, region.split('-')[-1].upper()] + ["‚ùå"] * 6 + ["–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞"]

    langs = retry_request(get_languages, url)
    if not langs:
        return [game_query, region.split('-')[-1].upper()] + ["–û—à–∏–±–∫–∞"] * 6 + ["–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —è–∑—ã–∫–∏"]

    has_ps5 = bool(langs['ps5_voice'] or langs['ps5_subs'])
    has_ps4 = bool(langs['ps4_voice'] or langs['ps4_subs'])

    if platform.lower() == "ps5":
        return [
            game_query,
            region.split('-')[-1].upper(),
            yesno_md(has_ps5),
            yesno_md(lang_code in langs['ps5_voice']),
            yesno_md(lang_code in langs['ps5_subs']),
            url
        ]
    if platform.lower() == "ps4":
        return [
            game_query,
            region.split('-')[-1].upper(),
            yesno_md(has_ps4),
            yesno_md(lang_code in langs['ps4_voice']),
            yesno_md(lang_code in langs['ps4_subs']),
            url
        ]
    return None


def check_multiple_games_languages_md(games, regions, platform='ps5', lang_code='ru', output_file='output.md'):
    # –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —è–∑—ã–∫–æ–≤ –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏–≥—Ä –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ä–µ–≥–∏–æ–Ω–∞—Ö.
    header = f"### üéÆ –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–∑—ã–∫–æ–≤ –¥–ª—è –∏–≥—Ä (—è–∑—ã–∫: {lang_code})\n\n"
    table_header = (
        f"| –ò–≥—Ä–∞ | –†–µ–≥–∏–æ–Ω | {platform.upper()} | –û–∑–≤. | –°—É–±. | URL |\n"
        "|------|--------|-----|------|------|-----|\n"
    )

    with open(output_file, "w", encoding="utf-8") as f:
        f.write(header)
        f.write(table_header)

        logger.info(header.strip())
        logger.info(table_header.strip())

        for game in games:
            for region in regions:
                row = check_single_game_language_for_region_md(game, region, platform, lang_code)
                row_str = f"| {' | '.join(row)} |\n"
                f.write(row_str)
                logger.info(row_str.strip())
